from allauth.socialaccount.models import SocialAccount
from django.contrib.auth.models import User
from platform_app.models import Interviews, Schedules, UserProfiles, Results, Questions, Answers, CVScreeningReport
from rest_framework import serializers, validators
from django.contrib.auth import get_user_model
from dj_rest_auth.models import TokenModel


class RegisterSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('username', 'password', 'email')
        extra_kwargs = {
            "password": {"write_only": True},
            "email": {
                "required": True,
                "allow_blank": False,
                "validators": [
                    validators.UniqueValidator(
                        User.objects.all(), "A user with that Email already exists."
                    )
                ],
            },
        }

    def create(self, validated_data):
        user = User.objects.create_user(
            username=validated_data['username'],
            email=validated_data['email'],
            password=validated_data['password']
        )
        return user


class InterviewSerializer(serializers.ModelSerializer):
    class UserSerializer(serializers.ModelSerializer):
        class Meta:
            model = User
            fields = ['username', 'email']
    user = UserSerializer(read_only=True)
    final_score = serializers.IntegerField(source='results.final_score', read_only=True, allow_null=True)

    class Meta:
        model = Interviews
        fields = '__all__'
        extra_fields = ['final_score']



# Add this new serializer at the bottom
class ScheduleSerializer(serializers.ModelSerializer):
    class Meta:
        model = Schedules
        fields = ['id', 'start_time', 'end_time']


class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserProfiles
        fields = '__all__'

class UserDetailsSerializer(serializers.ModelSerializer):
    profile_picture = serializers.SerializerMethodField()

    class Meta:
        model = get_user_model()
        fields = ('pk', 'username', 'email', 'first_name', 'last_name', 'profile_picture', 'is_staff')
        read_only_fields = ('email',)

    def get_profile_picture(self, obj):
        try:
            # Find the user's social account (specifically Google)
            social_account = SocialAccount.objects.get(user=obj, provider='google')
            # Return the picture URL from the 'extra_data' dictionary
            return social_account.extra_data.get('picture')
        except SocialAccount.DoesNotExist:
            # If the user has no Google account linked (e.g., registered
            # with email), return None.
            return None


class CustomTokenSerializer(serializers.ModelSerializer):
    user = UserDetailsSerializer(read_only=True)
    token = serializers.CharField(source='key')

    class Meta:
        model = TokenModel
        fields = ('token', 'user')


class AvailableScheduleSerializer(serializers.ModelSerializer):
    booked_sessions = serializers.IntegerField(read_only=True)
    remaining_capacity = serializers.IntegerField(read_only=True)

    class Meta:
        model = Schedules
        fields = [
            'id',
            'start_time',
            'end_time',
            'booked_sessions',
            'remaining_capacity'
        ]


class ResultSerializer(serializers.ModelSerializer):
    class Meta:
        model = Results
        fields = '__all__'

class QuestionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Questions
        fields = '__all__'

class AnswerSerializer(serializers.ModelSerializer):
    class Meta:
        model = Answers
        fields = ['id', 'question_id', 'answer']


class UserProfilesSerializer(serializers.ModelSerializer):
    user = serializers.IntegerField(source='user.id', read_only=True)
    email = serializers.EmailField(source='user.email', read_only=True)
    username = serializers.CharField(source='user.username', read_only=True)
    class Meta:
        model = UserProfiles
        fields = [
            'id',
            'username',
            'user',
            'email',
            'full_name',
            'phone_number',
            'date_of_birth',
            'gender',
            'profile_picture',
            'bio',
            'created_at'
        ]
        # These fields are generated by the server, not provided by the user
        read_only_fields = ['id','username','user', 'email', 'created_at']



class CVScreeningReportSerializer(serializers.ModelSerializer):
    id = serializers.CharField(read_only=True)
    class Meta:
        model = CVScreeningReport
        # Exclude fields that are handled automatically
        exclude = ('user', 'created_at')

